if __name__ == "__name__":
    
# Figureのテストファイル

>>> from Figure import *

## figure_union
>>> a = Line(Point2D([0.0, 0.0]), Point2D([10.0, 10.0]))
>>> b = Line(Point2D([10.0, 0.0]), Point2D([0.0, 10.0]))
>>> c = Circle(Point2D([0.5, 0.5]), 4)
>>> for f in UnionFigure((a, b, c)):
...     print(f)
Line(Point([0.0, 0.0, 1.0]), Point([10.0, 10.0, 1.0]))
Line(Point([10.0, 0.0, 1.0]), Point([0.0, 10.0, 1.0]))
Circle(Point([0.5, 0.5, 1.0]), 4)

## Point
>>> a = Point2D([1.0, 2.0])
>>> a[0], a[1]
(1.0, 2.0)
>>> a[2]
1.0

>>> a = Point3D([1.0, 2.0, 3.0])
>>> a[0], a[1], a[2]
(1.0, 2.0, 3.0)

>>> Point2D([1.0, 2.0]) + Point2D([3.0, 5.0])
Point([4.0, 7.0, 1.0])
>>> Point2D([1.0, 2.0]) - Point2D([3.0, 5.0])
Point([-2.0, -3.0, 1.0])
>>> Point2D([1.0, 2.0]) * Matrix.affine2D(swap=[True, True], trans=[2.0, 3.0])
Point([1.0, 1.0, 1.0])

>>> Point2D([1.0, 2.0]).transformed(Matrix.affine2D(swap=[True, True], trans=[2.0, 3.0]))
Point([1.0, 1.0, 1.0])


## Line
>>> list(Line(Point2D([0.0, 0.0]), Point2D([0.0, 0.0])))
[]
>>> list(Line(Point2D([0.0, 4.0]), Point2D([2.0, 0.0])))
[Point([0.0, 4.0, 1.0]), Point([0.5, 3.0, 1.0]), Point([1.0, 2.0, 1.0]), Point([1.5, 1.0, 1.0]), Point([2.0, 0.0, 1.0])]

>>> mat = Matrix.affine2D(scale=[0.25, 0.25])
>>> Line(Point2D([4.0, 4.0]), Point2D([-4.0, -4.0])).transformed(mat)
Line(Point([1.0, 1.0, 1.0]), Point([-1.0, -1.0, 1.0]))

>>> Line(Point2D([0.0, 3.0]), Point2D([6.0, 0.0])).mid()
Point([3.0, 1.5, 1.0])

## Polygon
>>> points = [Point([i, i**2]) for i in range(3)]
>>> list(Polygon(points))
[Line(Point([2, 4]), Point([0, 0])), Line(Point([0, 0]), Point([1, 1])), Line(Point([1, 1]), Point([2, 4]))]

>>> a = Polygon([Point2D([0, 0]), Point2D([0, 10]), Point2D([10, 0])])
>>> a.get_points()
[Point([0, 0, 1.0]), Point([0, 10, 1.0]), Point([10, 0, 1.0])]

## Ellipse
>>> ellipse = Ellipse(Point2D([0.0, 0.0]), 3.0, 4.0, 4).transformed(Matrix.affine2D(trans=[2.0, 2.0]))
>>> type(ellipse)
<class 'Figure.Ellipse'>
>>> ellipse.get_points()
[Point([5.0, 2.0, 1.0]), Point([2.0, 6.0, 1.0]), Point([-1.0, 2.0000000000000004, 1.0]), Point([1.9999999999999996, -2.0, 1.0])]

## Circle
>>> for p in Circle(Point([0.0, 0.0]), 10.0).circle_points(4): print(p)
Point([10.0, 0.0, 1.0])
Point([6.123233995736766e-16, 10.0, 1.0])
Point([-10.0, 1.2246467991473533e-15, 1.0])
Point([-1.8369701987210296e-15, -10.0, 1.0])
>>> for p in Circle(Point([0.0, 0.0]), 10.0).circle_points(4, True): print(p)
Point([-3.826834323650897, -9.238795325112868, 1.0])
Point([9.238795325112868, -3.8268343236508975, 1.0])
Point([3.8268343236508984, 9.238795325112868, 1.0])
Point([-9.238795325112868, 3.826834323650899, 1.0])

## Fractal
>>> mats = [Matrix.affine2D(trans=[0.0, i]) for i in range(2)]
>>> f = Fractal(Line(Point2D([0.0, 0.0]), Point2D([10.0, 10.0])), mats, 1, False)
>>> list(f)
[Line(Point([0.0, 0.0, 1.0]), Point([10.0, 10.0, 1.0])), Line(Point([0.0, 1.0, 1.0]), Point([10.0, 11.0, 1.0]))]
